create or replace package CUSTOM_CLOUD_AI is

-- Regist public LLM AI model endpoint
    procedure  REGIST_MODEL (
        PROVIDER varchar2,
        ENDPOINT varchar2,
        AUTH varchar2,
        RESPONSE_PARSE_PATH varchar2,
        REQUEST_TEMPLATE varchar2
    );

-- Unregist public LLM AI model endpoint
    procedure UNREGIST_MODEL (
        PROVIDER varchar2
    );

-- Create profile to store model config information
    procedure CREATE_PROFILE (
        PROFILE_NAME varchar2,
        DESCRIPTION varchar2,
        ATTRIBUTES clob
    );

-- Delete profile to remove model config information
    procedure DROP_PROFILE (
        PROFILE_NAME varchar2
    );

-- Update prompt template in profile
    procedure UPDATE_PROFILE_PROMPT (
        PROFILE_NAME varchar2,
        TEMPLATE_NAME varchar2,
        TEMPLATE_VALUE varchar2
    );

-- Return text response generated by LLM
    function CHAT(
        PROMPT in varchar2,
        PROFILE_NAME in varchar2
    ) return varchar2;

-- Get table DDL information
    function GET_TABLE_INFO(
        SCHEMA_NAME in varchar2,
        MY_TABLE_NAME in varchar2,
        PROFILE_NAME in varchar2
        ) return varchar2;

-- Return prompt generated for SELECT AI 
    function SHOWPROMPT(
        PROMPT in varchar2,
        PROFILE_NAME in varchar2
        ) return varchar2;

-- Return SQL generated by LLM
    function SHOWSQL(
        PROMPT in varchar2,
        PROFILE_NAME in varchar2
    ) return varchar2;



end CUSTOM_CLOUD_AI;
/



-------------------------------------------------------------------


create or replace package body CUSTOM_CLOUD_AI is

-- 注册模型
    procedure  REGIST_MODEL (
        PROVIDER varchar2,
        ENDPOINT varchar2,
        AUTH varchar2,
        RESPONSE_PARSE_PATH varchar2,
        REQUEST_TEMPLATE varchar2
    )
    is
    begin
        insert into CUSTOM_CLOUD_AI_REGEST_MODELS (
            MODEL_PROVIDER,
            MODEL_ENDPOINT,
            MODEL_AUTH,
            MODEL_RESPONSE_PARSE_PATH,
            MODEL_REQUEST_TEMPLATE
        ) values (
            PROVIDER,
            ENDPOINT,
            AUTH,
            RESPONSE_PARSE_PATH,
            REQUEST_TEMPLATE
        );

        commit;

        DBMS_OUTPUT.PUT_LINE('MODEL REGISTERED SUCCESSFULLY');
    exception
    /*
        WHEN DUP_VAON_INDEX THEN
            ROLLBACK;
            DBMS_OUTPUT.PUT_LINE('Error: Provider already exists');*/
        when others then
            rollback;
            DBMS_OUTPUT.PUT_LINE('ERROR REGISTERING MODEL: ' || SQLERRM);
    end REGIST_MODEL;

-- 删除模型注册信息
    procedure UNREGIST_MODEL (
        PROVIDER varchar2
    )
    is
    begin
        delete from CUSTOM_CLOUD_AI_REGEST_MODELS where MODEL_PROVIDER = PROVIDER;
        commit;
        DBMS_OUTPUT.PUT_LINE('MODEL UNREGISTERED SUCCESSFULLY');
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('ERROR: PROVIDER NOT FOUND');
        when others then
            rollback;
            DBMS_OUTPUT.PUT_LINE('ERROR UNREGISTERING MODEL: ' || SQLERRM);
    end UNREGIST_MODEL;

-- 创建profile
    procedure CREATE_PROFILE (
        PROFILE_NAME varchar2,
        DESCRIPTION varchar2,
        ATTRIBUTES clob
    )
    is
        V_PROVIDER varchar2(100);
        V_MODEL varchar2(100);
        V_TEMPERATURE number;
        V_MAX_TOKENS number;
        V_STOP_TOKENS varchar2(1000);
        V_OBJECT_LIST clob;

        V_PROVIDER_LOW varchar2(100);
        V_MODEL_LOW varchar2(100);
        V_TEMPERATURE_LOW number;
        V_MAX_TOKENS_LOW number;
        V_STOP_TOKENS_LOW varchar2(1000);
        V_OBJECT_LIST_LOW clob;

        V_PROMPT_TEMPLATE varchar2(32767) := 'Read the below table description and write an oracle sql to answer the following question. 
Pay attention to table name, use only below tables.

Oracle databse tables with their properties:
<table_infos>

Question:
<prompt>

Task:
generate plain text without markdown formate. Do not write anything else except the sql query.
Use full table name, contains schema name.
Select proper columns. Keep the column sort order as above.

Generated oracle sql statement:';
    V_PROMPT_DDL varchar2(32767) := '### Table meaning: <table_comment>
column_name data_type, 
CREATE TABLE  <schema>.<table_name> (
<column_info>';

    begin
        V_PROMPT_TEMPLATE := REPLACE(V_PROMPT_TEMPLATE,chr(10),'\n');
        V_PROMPT_DDL := REPLACE(V_PROMPT_DDL,chr(10),'\n');
        -- 解析attributes JSON 数据
        select json_value(ATTRIBUTES, '$.PROVIDER'),
               json_value(ATTRIBUTES, '$.MODEL'),
               to_number(json_value(ATTRIBUTES, '$.TEMPERATURE')),
               to_number(json_value(ATTRIBUTES, '$.MAX_TOKENS')),
               json_value(ATTRIBUTES, '$.STOP_TOKENS'),
               json_query(ATTRIBUTES, '$.OBJECT_LIST')
        into V_PROVIDER, V_MODEL, V_TEMPERATURE, V_MAX_TOKENS, V_STOP_TOKENS, V_OBJECT_LIST
        from DUAL;

        select json_value(ATTRIBUTES, '$.provider'),
               json_value(ATTRIBUTES, '$.model'),
               to_number(json_value(ATTRIBUTES, '$.temprature')),
               to_number(json_value(ATTRIBUTES, '$.max_tokens')),
               json_value(ATTRIBUTES, '$.stop_tokens'),
               json_query(ATTRIBUTES, '$.object_list')
        into V_PROVIDER_LOW, V_MODEL_LOW, V_TEMPERATURE_LOW, V_MAX_TOKENS_LOW, V_STOP_TOKENS_LOW, V_OBJECT_LIST_LOW
        from DUAL;

        if V_PROVIDER is null then V_PROVIDER := V_PROVIDER_LOW;end if;
        if V_MODEL is null then V_MODEL := V_MODEL_LOW;end if;
        if V_TEMPERATURE is null then V_TEMPERATURE := V_TEMPERATURE_LOW;end if;
        if V_MAX_TOKENS is null then V_MAX_TOKENS := V_MAX_TOKENS_LOW;end if;
        if V_STOP_TOKENS is null then V_STOP_TOKENS := V_STOP_TOKENS_LOW;end if;
        if V_OBJECT_LIST is null then V_OBJECT_LIST := V_OBJECT_LIST_LOW;end if;

        if V_TEMPERATURE is null then V_TEMPERATURE := 0; end if;
        if V_MAX_TOKENS is null then V_MAX_TOKENS := 4000; end if;
        if V_STOP_TOKENS is null then V_STOP_TOKENS := 'null'; end if;

        -- 插入数据到表CUSTOM_CLOUD_AI_PROFILES
        insert into CUSTOM_CLOUD_AI_PROFILES (
            AI_PROFILE_NAME,
            AI_DESCRIPTION,
            PROVIDER,
            MODEL,
            TEMPERATURE,
            MAX_TOKENS,
            STOP_TOKENS,
            OBJECT_LIST,
            PROMPT_TEMPLATE,
            PROMPT_DDL
        ) values (
            PROFILE_NAME,
            DESCRIPTION,
            V_PROVIDER,
            V_MODEL,
            V_TEMPERATURE,
            V_MAX_TOKENS,
            V_STOP_TOKENS,
            UPPER(V_OBJECT_LIST),
            V_PROMPT_TEMPLATE,
            V_PROMPT_DDL
        );

        commit;

        DBMS_OUTPUT.PUT_LINE('PROFILE CREATED SUCCESSFULLY');
    exception
        when others then
            rollback;
            DBMS_OUTPUT.PUT_LINE('ERROR CREATING PROFILE: ' || SQLERRM);
    end CREATE_PROFILE;

-- 删除profile
    procedure DROP_PROFILE (
        PROFILE_NAME varchar2
    )
    is
    begin
        delete from CUSTOM_CLOUD_AI_PROFILES where AI_PROFILE_NAME = PROFILE_NAME;
        commit;
        DBMS_OUTPUT.PUT_LINE('PROFILE DROPPED SUCCESSFULLY');
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('ERROR: PROFILE NOT FOUND');
        when others then
            rollback;
            DBMS_OUTPUT.PUT_LINE('ERROR DROPPING PROFILE: ' || SQLERRM);
    end DROP_PROFILE;

-- Update prompt in profile
    procedure UPDATE_PROFILE_PROMPT (
        PROFILE_NAME varchar2,
        TEMPLATE_NAME varchar2,
        TEMPLATE_VALUE varchar2
    )
    is
    begin
        if UPPER(TEMPLATE_NAME) = 'PROMPT_TEMPLATE' then
            update CUSTOM_CLOUD_AI_PROFILES
            set PROMPT_TEMPLATE = TEMPLATE_VALUE
            where AI_PROFILE_NAME = PROFILE_NAME;
        elsif UPPER(TEMPLATE_NAME) = 'PROMPT_DDL' then
            update CUSTOM_CLOUD_AI_PROFILES
            set PROMPT_DDL = TEMPLATE_VALUE
            where AI_PROFILE_NAME = PROFILE_NAME;
        else
            DBMS_OUTPUT.PUT_LINE('INVALID TEMPLATE NAME');
            RETURN;
        end if;

        commit;
        DBMS_OUTPUT.PUT_LINE('PROFILE PROMPT UPDATED SUCCESSFULLY');
    exception
        when NO_DATA_FOUND then
            DBMS_OUTPUT.PUT_LINE('ERROR: PROFILE NOT FOUND');
        when others then
            rollback;
            DBMS_OUTPUT.PUT_LINE('ERROR UPDATING PROFILE PROMPT: ' || SQLERRM);
    end UPDATE_PROFILE_PROMPT;

-- Return text response generated by LLM
    function CHAT (
        PROMPT varchar2,
        PROFILE_NAME varchar2
    ) return varchar2
    is
        L_HTTP_REQUEST  UTL_HTTP.REQ;
        L_HTTP_RESPONSE UTL_HTTP.RESP;
        L_PROVIDER      varchar2(256);
        L_URL           varchar2(4000);
        L_TOKEN         varchar2(4000);
        L_REQUEST_BODY  varchar2(30000);
        L_RESPONSE_BODY clob;
        L_JSONPATH      varchar2(4000);
        L_ANSWER        varchar2(4000);

        V_MODEL         varchar2(100);
        V_TEMPERATURE   number;
        V_MAX_TOKENS    number;
        V_STOP_TOKENS   varchar2(256);
    begin
        -- Retrieve profile information
        select PROVIDER, MODEL, TEMPERATURE, MAX_TOKENS, STOP_TOKENS
        into L_PROVIDER, V_MODEL, V_TEMPERATURE, V_MAX_TOKENS, V_STOP_TOKENS
        from CUSTOM_CLOUD_AI_PROFILES 
        where UPPER(AI_PROFILE_NAME) = UPPER(PROFILE_NAME);

        -- Retrieve model information
        select MODEL_PROVIDER, MODEL_ENDPOINT, MODEL_AUTH, MODEL_RESPONSE_PARSE_PATH, MODEL_REQUEST_TEMPLATE
        into L_PROVIDER, L_URL ,L_TOKEN, L_JSONPATH, L_REQUEST_BODY
        from CUSTOM_CLOUD_AI_REGEST_MODELS
        where UPPER(MODEL_PROVIDER) = UPPER(L_PROVIDER);

        -- Construct request body
        L_REQUEST_BODY := REPLACE(L_REQUEST_BODY,'<MODEL>',V_MODEL);
        L_REQUEST_BODY := REPLACE(L_REQUEST_BODY,'<TEMPERATURE>',TO_CHAR(V_TEMPERATURE));
        L_REQUEST_BODY := REPLACE(L_REQUEST_BODY,'<MAX_TOKENS>',TO_CHAR(V_MAX_TOKENS));
        L_REQUEST_BODY := REPLACE(L_REQUEST_BODY,'<STOP>',V_STOP_TOKENS);
        L_REQUEST_BODY := REPLACE(L_REQUEST_BODY,'<CONTENT>',PROMPT);

        -- Open HTTP request
        L_HTTP_REQUEST := UTL_HTTP.BEGIN_REQUEST(URL => L_URL, METHOD => 'POST', HTTP_VERSION => 'HTTP/1.1');
        
        -- Set request headers
        
          
          UTL_HTTP.set_header(l_http_request, 'Content-Type', 'application/json');
          UTL_HTTP.set_header(l_http_request, 'Accept', 'application/json');
          UTL_HTTP.set_header(l_http_request, 'Authorization', 'Bearer ' || l_token);
        
        -- Set request body
        UTL_HTTP.SET_BODY_CHARSET(L_HTTP_REQUEST, 'UTF-8');
        -- L_REQUEST_BODY := utl_url.escape(L_REQUEST_BODY, true, 'UTF8');
        UTL_HTTP.SET_HEADER(L_HTTP_REQUEST, 'Content-Length', LENGTHB(L_REQUEST_BODY));
        UTL_HTTP.WRITE_TEXT(L_HTTP_REQUEST, L_REQUEST_BODY);

        DBMS_OUTPUT.put_line(L_REQUEST_BODY);
        -- RETURN L_REQUEST_BODY;
        -- Get HTTP response
        L_HTTP_RESPONSE := UTL_HTTP.GET_RESPONSE(L_HTTP_REQUEST);
        
        -- Read response body
        UTL_HTTP.READ_TEXT(L_HTTP_RESPONSE, L_RESPONSE_BODY);
        
        -- Close HTTP response
        UTL_HTTP.END_RESPONSE(L_HTTP_RESPONSE);
        L_RESPONSE_BODY := REPLACE(L_RESPONSE_BODY, '''', '''''');
        -- RETURN L_RESPONSE_BODY;
        
        -- Handle response
        DBMS_OUTPUT.put_line('Response: ' || l_response_body);
        -- DBMS_OUTPUT.put_line('SELECT JSON_VALUE('''||L_RESPONSE_BODY||''','''||L_JSONPATH||''') FROM DUAL');
        execute immediate 'SELECT JSON_VALUE('''||L_RESPONSE_BODY||''','''||L_JSONPATH||''') FROM DUAL' into L_ANSWER;
        
        L_ANSWER := trim(L_ANSWER);
        
        if SUBSTR(L_ANSWER, -1) = ';' then
            L_ANSWER := SUBSTR(L_ANSWER, 1, LENGTH(L_ANSWER) - 1);
        end if;

        if L_ANSWER is not null then
            return L_ANSWER;
        else
            return L_RESPONSE_BODY;
        end if;
    exception
        when UTL_HTTP.TOO_MANY_REQUESTS then
            return 'HTTP 429 Too Many Requests';
        when UTL_HTTP.REQUEST_FAILED then
            return 'HTTP request failed';
        when others then
            return 'An error occurred: ' || SQLERRM;
    end CHAT;

 -- Get table DDL information
    function GET_TABLE_INFO(
        SCHEMA_NAME in varchar2,
        MY_TABLE_NAME in varchar2,
        PROFILE_NAME in varchar2
        ) return varchar2 is
        TEMPLATE_TABLE varchar(32767);
        TABLE_INFO varchar(32767);
        TABLE_COMMENT varchar(32767);
        COLUMN_INFO varchar(32767);
        begin
            select PROMPT_DDL into TEMPLATE_TABLE 
            from CUSTOM_CLOUD_AI_PROFILES 
            where UPPER(AI_PROFILE_NAME)=UPPER(PROFILE_NAME);
                
            TABLE_INFO :=  REPLACE(TEMPLATE_TABLE,chr(10),'\n');

            select COMMENTS into TABLE_COMMENT
            from ALL_TAB_COMMENTS
            where OWNER=SCHEMA_NAME and TABLE_NAME = MY_TABLE_NAME and COMMENTS is not null;

            TABLE_INFO := REPLACE(TABLE_INFO,'<schema>',SCHEMA_NAME);
            TABLE_INFO := REPLACE(TABLE_INFO,'<table_name>',MY_TABLE_NAME);
            TABLE_INFO := REPLACE(TABLE_INFO,'<table_comment>',TABLE_COMMENT);

            select listagg(COL_INFO,'\n') into COLUMN_INFO
            from (
                select COLUMN_NAME||' '||DATA_TYPE||','||COMMENTS as COL_INFO
                from (
                    select A.COLUMN_NAME,A.DATA_TYPE,
                        case when B.COMMENTS is not null then ' -- '||B.COMMENTS else '' end as COMMENTS
                    from ALL_TAB_COLUMNS A
                    left join ALL_COL_COMMENTS B on A.OWNER=B.OWNER and A.TABLE_NAME=B.TABLE_NAME and A.COLUMN_NAME=B.COLUMN_NAME
                    where A.OWNER=SCHEMA_NAME and A.TABLE_NAME= MY_TABLE_NAME
                    order by COLUMN_ID asc
                )
            );
            
            TABLE_INFO := REPLACE(TABLE_INFO,'<column_info>',COLUMN_INFO);
            TABLE_INFO := TABLE_INFO||');';
            -- EXCEPTION WHEN NO_DATA_FOUND THEN NULL; 
            return TABLE_INFO;
        end GET_TABLE_INFO;

-- Return prompt generated for SELECT AI 
    function SHOWPROMPT(
        PROMPT in varchar2,
        PROFILE_NAME in varchar2
        ) return varchar2 is        
        TABLE_INFOS varchar(32767) := '';
        EXAMPLE_SQL varchar2(32767);
        PROMPT_NEW varchar2(32767);
        TEMPLATE_POMPT varchar2(32767);
        begin
            select PROMPT_TEMPLATE into TEMPLATE_POMPT 
            from CUSTOM_CLOUD_AI_PROFILES 
            where UPPER(AI_PROFILE_NAME)=UPPER(PROFILE_NAME);

            for TAB in (
                select JT.OWNER,JT.NAME
                from CUSTOM_CLOUD_AI_PROFILES,
                json_table(OBJECT_LIST, '$[*]'
                    columns ( OWNER varchar2(256) path '$.OWNER',
                              NAME varchar2(256) path '$.NAME'
                    )) as JT
                    where UPPER(AI_PROFILE_NAME)=UPPER(PROFILE_NAME)

                ) loop
                    begin
                        TABLE_INFOS := TABLE_INFOS ||'\n\n'|| GET_TABLE_INFO(TAB.OWNER,TAB.NAME,PROFILE_NAME);
                    exception
                        when NO_DATA_FOUND then
                            -- 如果没有找到数据，则跳过当前循环迭代
                            continue;
                    end;
                end loop;

            -- example_sql := match_keyword(PROMPT, MY_PROFILE_NAME);
            
            PROMPT_NEW := REPLACE(TEMPLATE_POMPT,'<table_infos>',TABLE_INFOS);
            
            -- prompt_new := REPLACE(prompt_new,'<Example SQL pitch>',example_sql);
            PROMPT_NEW := REPLACE(PROMPT_NEW,'<prompt>',PROMPT);

            PROMPT_NEW := REPLACE(PROMPT_NEW,chr(10),'\n');

            return PROMPT_NEW;
        end SHOWPROMPT;

-- Return SQL generated by LLM
  function SHOWSQL (
        PROMPT       in varchar2,
        PROFILE_NAME in varchar2
        ) return varchar2 is
            OUTPUT_RESPONSE varchar(32767);
            PROMPT_TEXT     varchar(32767);
            COMMENTS_ALL varchar(32767);
            CUSTOM_PROMPT varchar(32767);
            EXAMPLE_SQL varchar(32767) := '';
        begin
            
            CUSTOM_PROMPT := SHOWPROMPT(PROMPT,PROFILE_NAME);
            select
                CHAT(
                    PROMPT => CUSTOM_PROMPT,
                    PROFILE_NAME => PROFILE_NAME)
            into OUTPUT_RESPONSE
            from DUAL; 
            return OUTPUT_RESPONSE;

    end SHOWSQL;


end CUSTOM_CLOUD_AI;
/